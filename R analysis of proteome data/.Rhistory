source("http://bioconductor.org/biocLite.R")
biocLite("BridgeDbR")
library(biomaRt)
?mart
?useMart
biocLite(AgiMicroRna)
source("http://bioconductor.org/biocLite.R")
biocLite("AgiMicroRna")
library(AgiMicroRna)
library(AgiMicroRna)
library(gplots)
library(RColorBrewer)
source("http://bioconductor.org/biocLite.R")
biocLite("gplots")
biocLite("RColorBrewer")
Ã­ntersect
intersect()
?intersect
intersect(x, y)
subset?
??
sdgfsd
?subset
load("C:/Users/Administrator/ownCloud/Teaching/2015_Internships/VitD3-supplementation_Claire-Lemmens/Normalized_data/.RData")
source("https://bioconductor.org/biocLite.R")
read.delim
?read.delim
source("http://bioconductor.org/biocLite.R")
biocLite(c("AnnotationDbi", "impute", "GO.db", "preprocessCore"))
install.packages("C:/Users/Administrator/ownCloud/# Grants/2012_Microgennet/2015_Exchange_Ingrid/2015_Chapter3/Paper_PLOS-One/2016-07_Coexpression-network/WGNCA_Tutorial1/GO.db_3.3.0.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/Administrator/Desktop/GO.db_3.3.0.tar.gz", repos = NULL, type = "source")
install.packages("WGCNA")
goodSamplesGenes
goodSamplesGenes()
library(WGCNA)
goodSamplesGenes()
source("https://bioconductor.org/biocLite.R")
install.packages("C:/Users/Administrator/Desktop/GO.db_3.3.0.tar.gz", repos = NULL, type = "source")
library(GO.db)
library("AnnotationDbi", lib.loc="C:/Program Files/R/R-3.2.2/library")
detach("package:Biobase", unload=TRUE)
detach("package:BiocGenerics", unload=TRUE)
remove.packages("AnnotationDbi")
source("https://bioconductor.org/biocLite.R")
biocLite("AnnotationDbi")
source("https://bioconductor.org/biocLite.R")
biocLite("AnnotationDbi")
library(AnnotationDbi)
detach("package:BiocInstaller", unload=TRUE)
detach("package:BiocGenerics", unload=TRUE)
detach("package:Biobase", unload=TRUE)
bioclite("GO.db")
source("https://bioconductor.org/biocLite.R")
bioclite("GO.db")
biocLite("GO.db")
install.packages("C:/Users/Administrator/Desktop/GO.db_3.3.0.tar.gz", repos = NULL, type = "source")
remove.packages("AnnotationDbi")
install.packages("C:/Users/Administrator/Desktop/AnnotationDbi_1.34.4.zip", repos = NULL)
source("https://bioconductor.org/biocLite.R")
biocLite("BiocUpgrade")
source("https://bioconductor.org/biocLite.R")
bioClite()
biocLite()
detach("package:BiocInstaller", unload=TRUE)
library("BiocInstaller", lib.loc="C:/Program Files/R/R-3.2.2/library")
biocLite("GO.db")
source("http://bioconductor.org/biocLite.R")
biocValid(fix=TRUE)
biocLite("GO.db")
biocValid(fix=TRUE)
biocLite(c("AnnotationDbi", "impute", "GO.db", "preprocessCore"))
BiocInstaller::biocValid()
install.packages("GO.db")
### Step 0: Are You Ready?
2 #
3 # This script will load the appropriate libraries and ensure they are functional.
4 #
5 # This is helpful to run PRIOR to workshops and other tutorials to mitigate long install times.
6 #
7 # If you see errors running this code you should pursue troubleshooting advice per
8 # your setup until installation is successful.
9
10 ### Install libs and utils
11 if(!("pacman" %in% installed.packages())) install.packages("pacman")
12 library(pacman)
13 p_load(RJSONIO,igraph,httr,stringr,XML,RColorBrewer,devtools)
14
15 # CyREST helper functions
16 install_github('cytoscape/cytoscape-automation/for-scripters/R/r2cytoscape')
17 library(r2cytoscape)
18
19 #### Test successful installations
20 ip = installed.packages()
21 if("RJSONIO" %in% ip) print("Success: the RJSONIO lib is installed") else print("Warning: RJSONIO lib is not installed. Please install this lib before proceeding.")
22 if("igraph" %in% ip) print("Success: the igraph lib is installed") else print("Warning: igraph lib is not installed. Please install this lib before proceeding.")
23 if("httr" %in% ip) print("Success: the httr lib is installed") else print("Warning: httr lib is not installed. Please install this lib before proceeding.")
24 if("stringr" %in% ip) print("Success: the stringr lib is installed") else print("Warning: stringr lib is not installed. Please install this lib before proceeding.")
25 if("XML" %in% ip) print("Success: the XML lib is installed") else print("Warning: XML lib is not installed. Please install this lib before proceeding.")
26 if("RColorBrewer" %in% ip) print("Success: the RColorBrewer lib is installed") else print("Warning: RColorBrewer lib is not installed. Please install this lib before proceeding.")
27 if("devtools" %in% ip) print("Success: the devtools lib is installed") else print("Warning: devtools lib is not installed. Please install this lib before proceeding.")
28 if(exists('command2query',mode='function')) print("Success: r2cytoscape is installed") else print("Warning: r2cytoscape is not installed. Please source this script before proceeding.")
29
30 #### If all messages report "Success", then you are ready to go! Proceed to other modules...
### Step 0: Are You Ready?
#
# This script will load the appropriate libraries and ensure they are functional.
#
# This is helpful to run PRIOR to workshops and other tutorials to mitigate long install times.
#
# If you see errors running this code you should pursue troubleshooting advice per
# your setup until installation is successful.
### Install libs and utils
if(!("pacman" %in% installed.packages())) install.packages("pacman")
library(pacman)
p_load(RJSONIO,igraph,httr,stringr,XML,RColorBrewer,devtools)
# CyREST helper functions
install_github('cytoscape/cytoscape-automation/for-scripters/R/r2cytoscape')
library(r2cytoscape)
#### Test successful installations
ip = installed.packages()
if("RJSONIO" %in% ip) print("Success: the RJSONIO lib is installed") else print("Warning: RJSONIO lib is not installed. Please install this lib before proceeding.")
if("igraph" %in% ip) print("Success: the igraph lib is installed") else print("Warning: igraph lib is not installed. Please install this lib before proceeding.")
if("httr" %in% ip) print("Success: the httr lib is installed") else print("Warning: httr lib is not installed. Please install this lib before proceeding.")
if("stringr" %in% ip) print("Success: the stringr lib is installed") else print("Warning: stringr lib is not installed. Please install this lib before proceeding.")
if("XML" %in% ip) print("Success: the XML lib is installed") else print("Warning: XML lib is not installed. Please install this lib before proceeding.")
if("RColorBrewer" %in% ip) print("Success: the RColorBrewer lib is installed") else print("Warning: RColorBrewer lib is not installed. Please install this lib before proceeding.")
if("devtools" %in% ip) print("Success: the devtools lib is installed") else print("Warning: devtools lib is not installed. Please install this lib before proceeding.")
if(exists('command2query',mode='function')) print("Success: r2cytoscape is installed") else print("Warning: r2cytoscape is not installed. Please source this script before proceeding.")
#### If all messages report "Success", then you are ready to go! Proceed to other modules...
### Step 0: Are You Ready?
#
# This script will load the appropriate libraries and ensure they are functional.
#
# This is helpful to run PRIOR to workshops and other tutorials to mitigate long install times.
#
# If you see errors running this code you should pursue troubleshooting advice per
# your setup until installation is successful.
### Install libs and utils
if(!("pacman" %in% installed.packages())) install.packages("pacman")
library(pacman)
p_load(RJSONIO,igraph,httr,stringr,XML,RColorBrewer,devtools)
# CyREST helper functions
install_github('cytoscape/cytoscape-automation/for-scripters/R/r2cytoscape')
library(r2cytoscape)
#### Test successful installations
ip = installed.packages()
if("RJSONIO" %in% ip) print("Success: the RJSONIO lib is installed") else print("Warning: RJSONIO lib is not installed. Please install this lib before proceeding.")
if("igraph" %in% ip) print("Success: the igraph lib is installed") else print("Warning: igraph lib is not installed. Please install this lib before proceeding.")
if("httr" %in% ip) print("Success: the httr lib is installed") else print("Warning: httr lib is not installed. Please install this lib before proceeding.")
if("stringr" %in% ip) print("Success: the stringr lib is installed") else print("Warning: stringr lib is not installed. Please install this lib before proceeding.")
if("XML" %in% ip) print("Success: the XML lib is installed") else print("Warning: XML lib is not installed. Please install this lib before proceeding.")
if("RColorBrewer" %in% ip) print("Success: the RColorBrewer lib is installed") else print("Warning: RColorBrewer lib is not installed. Please install this lib before proceeding.")
if("devtools" %in% ip) print("Success: the devtools lib is installed") else print("Warning: devtools lib is not installed. Please install this lib before proceeding.")
if(exists('command2query',mode='function')) print("Success: r2cytoscape is installed") else print("Warning: r2cytoscape is not installed. Please source this script before proceeding.")
#### If all messages report "Success", then you are ready to go! Proceed to other modules...
https://github.com/cytoscape/cytoscape-automation/blob/master/for-scripters/R/check-library-installation.R
install_github('cytoscape/cytoscape-automation/for-scripters/R/r2cytoscape')
library(r2cytoscape)
getwd()
string.cmd = 'string disease query disease="RETT syndrome " cutoff=0.9 species="Homo sapiens" limit=150'
commandRun(string.cmd)
library(pacman)
p_load(RJSONIO,igraph,httr,XML,RColorBrewer,r2cytoscape)
string.cmd = 'string disease query disease="RETT syndrome " cutoff=0.9 species="Homo sapiens" limit=150'
commandRun(string.cmd)
string.cmd = 'string disease query disease="RETT syndrome " cutoff=0.9 species="Homo sapiens" limit=150'
commandRun(string.cmd)
* ChEMBL: http://projects.bigcat.unimaas.nl/data/cytargetlinker/linksets/chembl/chembl_23_hsa_20180126.zip
```{r}
load("data/tutorial-ovc-expr-mean-dataset.robj")
```
CTLextend.cmd = 'cytargetlinker extend idAttribute="canonical name" linkSetFiles="C:/Users/Administrator/ownCloud/Papers/2018_CyTargetLinker-automation/chembl_23_hsa_20180126.xgmml" '
commandRun(CTLextend.cmd)
CTLlayout.cmd = 'cytargetlinker applyLayout network=current'
commandRun(CTLlayout.cmd)
CTLvisualstyle.cmd = 'cytargetlinker applyVisualstyle network=current'
commandRun(CTLvisualstyle.cmd)
CTLpanel.cmd = 'cytargetlinker showPanel show=true'
commandRun(CTLpanel.cmd)
CTLextend.cmd = 'cytargetlinker extend idAttribute="canonical name" direction=SOURCE linkSetFiles="C:/Users/Administrator/ownCloud/Papers/2018_CyTargetLinker-automation/chembl_23_hsa_20180126.xgmml" '
commandRun(CTLextend.cmd)
CTLextend.cmd = 'cytargetlinker extend idAttribute="canonical name" direction=source linkSetFiles="C:/Users/Administrator/ownCloud/Papers/2018_CyTargetLinker-automation/chembl_23_hsa_20180126.xgmml" '
commandRun(CTLextend.cmd)
CTLextend.cmd = 'cytargetlinker extend idAttribute="canonical name" direction="source" linkSetFiles="C:/Users/Administrator/ownCloud/Papers/2018_CyTargetLinker-automation/chembl_23_hsa_20180126.xgmml" '
commandRun(CTLextend.cmd)
CTLextend.cmd = 'cytargetlinker extend idAttribute="canonical name" direction="SOURCE" linkSetFiles="C:/Users/Administrator/ownCloud/Papers/2018_CyTargetLinker-automation/chembl_23_hsa_20180126.xgmml" '
commandRun(CTLextend.cmd)
source("https://bioconductor.org/biocLite.R")
biocLite("limma")
biocLite("GEOquery")
# download the BioC installation routines
source("http://bioconductor.org/biocLite.R")
#install the core packages
biocLite()
library(GEOquery)
getGEOSuppFiles("GSE31901")
biocLite("GEOquery")
library(GEOquery)
biocLite("GEOquery")
source("https://bioconductor.org/biocLite.R")
biocLite("GEOquery")
library(GEOquery)
source("http://bioconductor.org/biocLite.R")
biocLite("biomaRt")
library(biomaRt)
listEnsembl()
source("https://bioconductor.org/biocLite.R")
biocLite("RCy3")
library(RCy3)
#install.packages("knitr")
library(knitr)
knitr:::input_dir()
cytoscapePing()
if("string" %in% commandsHelp("")) print("Success: the STRING app is installed") else print("Warning: STRING app is not installed. Please install the STRING app before proceeding.")
if("cytargetlinker" %in% commandsHelp("")) print("Success: the CyTargetLinker app is installed") else print("Warning: CyTargetLinker app is not installed. Please install the CyTargetLinker app before proceeding.")
source("https://bioconductor.org/biocLite.R")
biocLite("RCy3")
library(RCy3)
#install.packages("knitr")
library(knitr)
knitr:::input_dir()
cytoscapePing()
if("string" %in% commandsHelp("")) print("Success: the STRING app is installed") else print("Warning: STRING app is not installed. Please install the STRING app before proceeding.")
if("cytargetlinker" %in% commandsHelp("")) print("Success: the CyTargetLinker app is installed") else print("Warning: CyTargetLinker app is not installed. Please install the CyTargetLinker app before proceeding.")
#define disease query, cutoff, species and limit
string.cmd = 'string disease query disease="Rett syndrome " cutoff=0.4 species="Homo sapiens" limit=20'
commandsRun(string.cmd)
chembl <- file.path(getwd(), "LinkSets", "chembl_23_hsa_20180126.xgmml")
omim <- file.path(getwd(), "LinkSets", "rare-disease-gene-associations-hsa-20180411.xgmml")
CTLextend.cmd = paste('cytargetlinker extend idAttribute="display name" linkSetFiles="', chembl, ',', omim, '" network=current', sep="")
commandsRun(CTLextend.cmd)
chembl <- file.path(getwd(), "LinkSets", "chembl_23_hsa_20180126.xgmml")
omim <- file.path(getwd(), "LinkSets", "rare-disease-gene-associations-hsa-20180411.xgmml")
CTLextend.cmd = paste('cytargetlinker extend idAttribute="display name" linkSetFiles="', chembl, ',', omim, '" network=current', sep="")
commandsRun(CTLextend.cmd)
chembl <- file.path(getwd(), "LinkSets", "chembl_23_hsa_20180126.xgmml")
omim <- file.path(getwd(), "LinkSets", "rare-disease-gene-associations-hsa-20180411.xgmml")
CTLextend.cmd = paste('cytargetlinker extend idAttribute="display name" linkSetFiles="', chembl, ',', omim, '" network=current', sep="")
commandsRun(CTLextend.cmd)
CTLlayout.cmd = 'cytargetlinker applyLayout network=current'
commandsRun(CTLlayout.cmd)
CTLlayout.cmd = 'cytargetlinker applyLayout network=current'
commandsRun(CTLlayout.cmd)
chembl <- file.path(getwd(), "LinkSets", "chembl_23_hsa_20180126.xgmml")
omim <- file.path(getwd(), "LinkSets", "rare-disease-gene-associations-hsa-20180411.xgmml")
CTLextend.cmd = paste('cytargetlinker extend idAttribute="display name" linkSetFiles="', chembl, ',', omim, '" network=current', sep="")
commandsRun(CTLextend.cmd)
chembl <- file.path(getwd(), "LinkSets", "chembl_23_hsa_20180126.xgmml")
omim <- file.path(getwd(), "LinkSets", "rare-disease-gene-associations-hsa-20180411.xgmml")
CTLextend.cmd = paste('cytargetlinker extend idAttribute="display name" linkSetFiles="', chembl, ',', omim, '" network=current', sep="")
commandsRun(CTLextend.cmd)
CTLlayout.cmd = 'cytargetlinker applyLayout network=current'
commandsRun(CTLlayout.cmd)
vizstyle.file <- file.path(getwd(), "VizStyles", "use-case1-style.xml")
LoadStyle.cmd = paste('vizmap load file file="',vizstyle.file,'"', sep="")
commandsRun(LoadStyle.cmd)
setVisualStyle("CTL Disease Compound Network")
?colon
?colon
my_vector = 1:99
my_vector
?matrix
my_matrix = matrix(my_vector)
?matrix
my_matrix = matrix(my_vector)
dim(my_matrix)
my_matrix[,]
dim(my_matrix)
my_matrix[,3]
my_matrix[33,1]
dim(my_matrix)
my_matrix = matrix(my_vector, ncol=3, byrow=TRUE)
dim(my_matrix)
?matrix
my_matrix = matrix(my_vector)
my_matrix = matrix(my_vector, ncol=3, byrow=TRUE)
x = my_matrix[,]
y = my_matrix[,]
plot(,)
?matrix
my_matrix = matrix(my_vector, ncol=3, byrow=TRUE)
?matrix
my_matrix = matrix(my_vector, ncol=3, byrow=TRUE)
dim(my_matrix)
my_matrix[1,]
x = my_matrix[,1]
y = my_matrix[,2]
plot(,)
?matrix
my_matrix = matrix(my_vector, ncol=3, byrow=TRUE)
x = my_matrix[,1]
y = my_matrix[,2]
plot(,)
x = my_matrix[,1]
y = my_matrix[,2]
plot(x,y)
x = my_matrix[,1]
plot(x^2 - 4000)
min()
min( my_matrix)
x = my_matrix[,1]
y = my_matrix[,2]
z = x - 10*y^(1/2)
plot(z)
min(z)
which(z)
which(min(z))
which(z==min(z))
x = my_matrix[,1]
plot(x^2 - 4000)
mean(my_matrix[,1])
mean(my_matrix[,2])
mean(my_matrix[,3])
data("PlantGrowth")
PlantGrowth
str(PlantGrowth)
sort(PlantGrowth[,1])
ordered_weight_indices = order(PlantGrowth[,1])
PlantGrowth[,2]
PlantGrowth[ordered_weight_indices,1]
PlantGrowth[ordered_weight_indices,2]
?aggregate
aggregate(PlantGrowth[,1] ~ PlantGrowth[,2], PlantGrowth, mean)
?boxplot
boxplot(PlantGrowth[,1] ~ PlantGrowth[,2])
?aggregate
?aov
aov_object = aov( ~ )
?aov
aov_object = aov(PlantGrowth[,1] ~ PlantGrowth[,2] )
summary(aov_object)
?aov
aov_object = aov(PlantGrowth[,1] ~ PlantGrowth[,2])
summary(aov_object)
?TukeyHSD
TukeyHSD(aov_object)
source("https://bioconductor.org/biocLite.R")
biocLite("RCy3")
library(RCy3)
install.packages("knitr")
library(knitr)
install.packages("knitr")
if(!"RCy3" %in% installed.packages()){
install.packages("RCy3")
}
library(RCy3)
if(!"knitr" %in% installed.packages()){
install.packages("knitr")
}
library(knitr)
knitr:::input_dir()
cytoscapePing()
if("cytargetlinker" %in% commandsHelp("")) print("Success: the CyTargetLinker app is installed") else print("Warning: CyTargetLinker app is not installed. Please install the CyTargetLinker app before proceeding.")
if("string" %in% commandsHelp("")) print("Success: the STRING app is installed") else print("Warning: STRING app is not installed. Please install the STRING app before proceeding.")
string.cmd = 'string disease query disease="Rett syndrome " cutoff=0.4 species="Homo sapiens" limit=20'
commandsRun(string.cmd)
chembl <- file.path(getwd(), "LinkSets", "chembl_23_hsa_20180126.xgmml")
omim <- file.path(getwd(), "LinkSets", "rare-disease-gene-associations-hsa-20180411.xgmml")
CTLextend.cmd = paste('cytargetlinker extend idAttribute="display name" linkSetFiles="', chembl, ',', omim, '" network=current', sep="")
commandsRun(CTLextend.cmd)
layoutNetwork()
vizstyle.file <- file.path(getwd(), "VizStyles", "use-case1-style.xml")
LoadStyle.cmd = paste('vizmap load file file="',vizstyle.file,'"', sep="")
commandsRun(LoadStyle.cmd)
?read.table
libary(Biobase)
libary("Biobase")
> if (!require("BiocManager"))
+ install.packages("BiocManager")
> BiocManager::install("Biobase")
if (!require("BiocManager")) + install.packages("BiocManager")
BiocManager::install("Biobase")
library(Biobase)
ExpressionSet
#Load packages
library(Biobase)
library(limma)
#Install Bioconductor
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.10")
BiocManager::install("Biobase")
BiocManager::install("limma")
#Load packages
library(Biobase)
library(limma)
DATA.DIR <- "C:/Users/Administrator/Documents/GitHub/Sabrina_BMS_Bachelor-Internship/R analysis of proteome data"
setwd(DATA.DIR)
getwd()
proteome <- proteome_abundance.9
prot <- read.delim("proteome_abundance.9", as.is=TRUE)
DATA.DIR <- "C:/Users/Administrator/Documents/GitHub/Sabrina_BMS_Bachelor-Internship/R analysis of proteome data/"
setwd(DATA.DIR)
getwd()
prot <- read.delim("proteome_abundance.9.txt", as.is=TRUE)
prot <- read.delim("pproteome_abundance_9txt", as.is=TRUE)
prot <- read.delim("pproteome_abundance_9.txt", as.is=TRUE)
prot <- read.delim("proteome_abundance_9.txt", as.is=TRUE)
prot <- read.delim("proteome_abundance9.txt", as.is=TRUE)
dim(prot)
colnames(prot)
rownames(prot) <- prot[,1]
prot <- prot[,-1]
desc <- read.delim("Subjectdata _2DM_iHMP5.txt", as.is=TRUE)
dim(desc)
colnames (desc)
#check order of description and normalised data columns
colnames(prot) == desc$SubjectID
# OK
Insgroup <- factor(desc$IR_IS_classification, levels=c("IS","IR"))
Insgroup
design<- model.matrix(~IR_IS_classification)
design<- model.matrix(~ Insgroup)
head(design,2)
colSums(design)
fit<- lmFit(prot,design)
fit<- eBayes(fit)
results <- topTable(fit, number=20009, coef="InsgroupIR")
write.table(results, file="proteome_limma_analysis.txt", sep="\t", row.names = TRUE, col.names = NA)
